# Git Architecture

## Git is a distributed version control system {.smaller}
:::: columns
::: {.column width="50%"}
![](figures/centralized.png){.nostretch width="70%" fig-align="center"}
:::

::: {.column width="50%"}
![](figures/distributed.png){.nostretch width="50%" fig-align="center"}
:::
::::
:::: columns
::: {.column width="50%"}
- Single server contains the DB
- Offline work is an issue
- Most operations are slow (done serverside)
- Single point of failure
- Example: CVS, Subversion
:::
::: {.column width="50%"}
- Clients have the full DB (including history)
- Can work offline
- Most operations are fast (local)
- Different workflows are supported
:::
::::


## Git stores snapshots, not deltas.
:::: columns
::: {.column width="50%"}
Delta-based version control
![](figures/deltas.png){fig-align="center"}

- File versions are stored as deltas
- Creating a branch often requires copying all the files
- Retrieving an old version of a file can be slow
:::
::: {.column width="50%"}
Git data model
![](figures/snapshots.png){fig-align="center"}

- Snapshots of a miniature file system
- Everything is referenced via checksums.
:::
::::

## Git features
- Files are checksummed and referenced as such:
    - Every version is stored just once
    - Data integrity is guaranteed
- It's blinding fast:
    - branching
    - retrieving an old version of a file
    - Diff between file versions or states
    - ...
- Git generally only adds data
    - You can only loose things that are not committed yet
    - Everything else is undoable

## 3-state model
:::: {layout="[50, 50]"}

::: {}
![](figures/areas.svg){fig-align="center"}
:::
::: {.class-smaller}

- `.git` directory (repo):
    - compressed DB (history, blobs, ...)
- Working tree:
    - checkout of one version of the project
    - files can be worked on
- Staging area (index):
    - Files for next commit

:::
::::
